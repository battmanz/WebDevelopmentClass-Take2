@{
    ViewBag.Title = "Lesson 1";
}

<article>
    <h1>Lesson 1</h1>
    <section>
        <h2>Variables</h2>
        <div>
            <p>
                In JavaScript, you declare a variable using the <code>var</code> keyword. For example:
            </p>

            <pre><code class="brush: js;">@(@"
            var x;
            ")</code></pre>
            
            <p>
                That code declares a variable named "x", but does not explicitly assign it a value.
                It's value will therefore be set to the special value of <code>undefined</code> by default.
                
                Those of you who already have programming experience will be interested to know that JavaScript
                has both <code>null</code> and <code>undefined</code>. In many cases they can be used interchangeably,
                but they are in fact distinct values.
            </p>
            
            <p>
                <img src="~/Images/math-jokes-find-x-here-it-is.jpg" alt="Math joke: here is x">
            </p>
            
            <p>
                Variables in programming differ from variables in mathematics in the sense that, in math, the task
                is often to solve for the variable, or in other words, figure out what its value is. In programming,
                however, you as the programmer choose what the value of the variable should be. Variables are like
                storage containers, you put some data in them and then later you can examine it or even remove it.
            </p>
            
            <p>
                Instead of naming variables "x", "y", "z", etc, it's a better practice to name a variable based on
                what piece of data it stores. So for example, if you have a variable that stores the name of a person,
                a reasonable name for that variable would be "name".
            </p>
            
            <pre><code class="brush: js;">@(@"
            var name = ""John Smith"";
            ")</code></pre>
    </section>
    
    <section>
        <h2>Types</h2>
        <div>
            <p>
                The data that variables can hold is not all the same. Because of that JavaScript has different types.
                JavaScript has six primitive types and well as <code>Object</code>, which is not a primitive type.
                With just these few types, you can build any program immaginable. The six primitive types are:
            </p>
        
            <ul>
                <li>Boolean</li>
                <li>Null</li>
                <li>Undefined</li>
                <li>Number</li>
                <li>String</li>
                <li>Symbol (recently added in 2015 - we won't discuss this today)</li>
            </ul>
            
            <p>
                We will cover <code>Boolean</code>, <code>Number</code>, and <code>String</code> more in depth in the following sections.
                Though, we won't cover it at this time, you can think of both <code>Null</code> and <code>Undefined</code> as an absence of a value.
                The other data type is <code>Object</code>. Though it's just one type, it is perhaps the most powerful and the most diverse.
                There are many kinds of objects as we'll soon see. One import kind of object is an <code>Array</code>.
            </p>
            
            <h3>jsfiddle</h3>
            <p>
                As we explore these data types, I invite you to open up <a href="https://jsfiddle.net/" target="_blank">jsfiddle</a>.
                This will allow you to try on your own the examples I will be covering. On the left side of the screen you can enter
                JavaScript. The "Run" button at the top of the screen will then execute the JavaScript.
            </p>
        </div>
    </section>
    
    <section>
        <h2>Booleans</h2>
        <div>
            <p>
                A <dfn>boolean</dfn> variable can only have one of two possible values: <code>true</code> or <code>false</code>. That's it.
                Though there are only two values, booleans are very powerful and used frequently. In fact a boolean value closely resembles
                what the computer is actually doing at a deeper level. Remember, that a computer is comprised of transistors that can either
                be on or off, 1 or 0. So you can think of <code>true</code> as being on (1), and <code>false</code> as being off (0).
            </p>

            <pre><code class="brush: js;">@(@"
            var iAmLateForDinner = true;
            var myWifeIsHappy = false;
            ")</code></pre>
            
            <p>
                We might use boolean values to track if the user is logged in or even if he/she is an administrator.
            </p>
            
            <pre><code class="brush: js;">@(@"
            var loggedIn = true;
            var administrator = false;
            ")</code></pre>
            
            <p>
                What other kinds of things could we keep track of with a boolean value?
            </p>
    </section>
    
    <section>
        <h2>Numbers</h2>
        <div>
            <p>
                A number represents a mathematical quantity. You can add, subtract, multiply, and divide them.
            </p>

            <pre><code class="brush: js;">@(@"
            var x = 5;
            var y = 3;

            var sum = x + y;
            var difference = x - y;
            var product = x * y;
            var quotient = x / y;
            ")</code></pre>
            
            <p>
                The simplest way to view the value of a variable in jsfiddle is to use <code>alert</code>.
                Just be warned that alerts can get really annoying really fast.
                Try the code above and then add the following at the bottom:
            </p>
            
            <pre><code class="brush: js;">@(@"
            alert(sum);
            alert(difference);
            alert(product);
            alert(quotient);
            ")</code></pre>
            
            <p>
                One thing I would like to mention is that JavaScript only has one number type - it does not have separate types
                for integers (whole numbers) vs real numbers (numbers with a decimal point) as other languages do.
                The following will give you the exact same results as the above code.
            </p>
            
            <pre><code class="brush: js;">@(@"
            var x = 5.0;
            var y = 3.0;

            var sum = x + y;
            var difference = x - y;
            var product = x * y;
            var quotient = x / y;
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>Strings</h2>
        <div>
            <p>
                Strings represent words or text, things that you might read or say.
            </p>

            <pre><code class="brush: js;">@(@"
            var name = ""Benedict Timothy Carlton Cumberbatch"";
            var make = 'Honda';
            var model = 'Accord';
            ")</code></pre>

            <p>
                You can use double or single quotes to start and end a string, but you can't mix and match.
                If you start a string with a double quote, you must end with a double quote. Same goes for single quotes.
                What if you want to include a single or double quote inside your string?
                For example, what if you wanted to include a compound word with an apostrophe in your string?
                One way of handling that is to use double quotes to start and end your string.
            </p>

            <pre><code class="brush: js;">@(@"
            var text = ""I can't believe it's not butter!"";
            
            // This is invalid and will throw an error.
            var error = 'I can't believe it's not butter!';
            ")</code></pre>

            <p>
                It's also worth mentioning that strings can contain any character, and that includes numeric characters. So, for example, it's legal
                to have a string such as <code>"123"</code>. This is different from the number <code>123</code> (no quotes). The string <code>"123"</code> could
                be used to talk about the number in a sentence. For example:
            </p>
            
            <pre><code class="brush: js;">@(@"
            var text = '""The answer is 123"", said Mary';
            ")</code></pre>
            
            <p>
                Questions:
            </p>
            
            <ol>
                <li>Would a <code>string</code> or a <code>number</code> be more suitable for a street address?</li>
                <li>What about a zip code?</li>
                <li>What about a person's age?</li>
            </ol>
        </div>
    </section>
    
    <section>
        <h2>Objects</h2>
        <div>
            <p>
                JavaScript is an object-oriented programming language. That means that we model the real word using objects.
                JavaScript makes it super easy to create objects.
                The opening curly brace <code>{</code> indicates that an object is being created. The closing curly brace <code>}</code>
                then ends the object. The following is an example of an object. As you can probably tell, it represents a car.
            </p>

            <pre><code class="brush: js;">@(@"
            var car = {
                make: 'Ford',
                model: 'Mustang',
                year: 1967,
                allWheelDrive: false
            };
            ")</code></pre>

            <p>
                An object is made up of <dfn>properties</dfn>. A property is a name/value pair. The car object above has
                four properties. One example is <code>make: 'Ford'</code>. The name of that property is <code>make</code>.
                The value of that property is <code>'Ford'</code>.
            </p>
            
            <p>
                Though you might not be able to tell, the type of the property <em>name</em> is always a <code>string</code>.
                The code could be rewritten as follows without changing its meaning in the slightest:
            </p>
            
            <pre><code class="brush: js;">@(@"
            var car = {
                ""make"": 'Ford',
                ""model"": 'Mustang',
                ""year"": 1967,
                ""allWheelDrive"": false
            };
            ")</code></pre>
            
            <p>
                The property <em>value</em> on the other hand can be any type - primitive or even another object.
                In the car example, what are the types of all four properties?
            </p>
            
            <p>
                As an example, the following car object has been modified to include an engine property of type object.
            </p>
            
            <pre><code class="brush: js;">@(@"
            var car = {
                make: 'Ford',
                model: 'Mustang',
                year: 1967,
                allWheelDrive: false,
                engine: {
                    type: 'V6',
                    displacementLiters: 3.7,
                    horsepower: 300                    
                }
            };
            ")</code></pre>
            
            <p>
                Quick assignment: in jsfiddle create an object that represents a person. Include at least 4 properties and use
                the <code>boolean</code>, <code>string</code>, and <code>number</code> types at least once. As a bonus, include
                a property whose value is another object.
            </p>
        </div>
    </section>

    <section>
        <h2>Arrays</h2>
        <div>
            <p>
                An array stores many values in a row, such as you would think of a list.
                An array is denoted by square brackets <code>[]</code>. In fact a pair of brackets, like that
                is how you create an empty array, meaning that it has zero items in the list.
            </p>

            <pre><code class="brush: js;">@(@"
            var emptyArray = [];
            ")</code></pre>

            <p>
                Each item in the array is separated from the next by a comma. The following array
                stores some numbers separated by commas.
            </p>
            
            <pre><code class="brush: js;">@(@"
            var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23];
            ")</code></pre>
            
            <p>
                An array can store any type of data. The following example shows an array that stores
                strings.
            </p>

            <pre><code class="brush: js;">@(@"
            var childNames = ['Elliot', 'Isaac', 'Anders', 'Juliet'];
            ")</code></pre>

            <p>
                An array can even store objects as the following code illustrates. Pay carefull attention to where
                the square brackets, curly brackets, and commas are. 
            </p>
            
            <pre><code class="brush: js;">@(@"
            var children = [{
                name: 'Elliot',
                age: 7
            }, {
                name: 'Isaac',
                age: 5
            }, {
                name: 'Anders',
                age: 2
            }, {
                name: 'Juliet',
                age: 0
            }
            ];
            ")</code></pre>
        </div>
    </section>
    
    <section>
        <h2>API</h2>
        <div>
            <p>The official definition of an <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API (as found on Wikipedia)</a> is</p>
            
            <blockquote cite="https://en.wikipedia.org/wiki/Application_programming_interface">
                In computer programming, an application programming interface (API) is a set of routines, protocols, and tools for building software applications.
                An API expresses a software component in terms of its operations, inputs, outputs, and underlying types.
                An API defines functionalities that are independent of their respective implementations, which allows definitions and implementations to vary without compromising the interface.
            </blockquote>
            
            <p>
                Now that we've got that out of the way, let's never repeat that again! I now want to give my oversimplified, jargon-less definition of an API.
            </p>
            
            <blockquote>
                An API is a website that's not meant for humans but for computers.
            </blockquote>
            
            <p>
                Instead of returning the data in a human-friendly format. The website returns data in a computer-friendly format, and what format do you think that is?
                JavaScript objects! The format is officially known as <dfn>JavaScript Object Notation (JSON)</dfn>.
            </p>
            
            <p>
                The last thing I want to do in this lesson is let you see two examples of APIs that return JSON. The first is the
                <a href="http://developer.rottentomatoes.com/" target="_blank">Rotten Tomatoes API</a> and the second is the
                <a href="https://familysearch.org/developers/docs/api/resources" target="_blank">Family Search API</a>.
                Now, because (as with most APIs) both of these require you to register, I have created a pre-made jsfiddle that already has the
                APIs loaded and ready to go. Your job is to view both APIs and then answer the questions in the following google doc.
            </p>
            
            <p><a href="http://jsfiddle.net/battmanz/nx6xqghf/" target="_blank">API jsfiddle</a></p>
            <p><a href="https://docs.google.com/forms/d/1zcMYhLDFMW4DdTetAzY39Bq0uqkiN-gI1hhyiudonwE/viewform" target="_blank">Questions</a></p>
        </div>
    </section>
</article>

@section scripts {
    <script>
        $(function () {
            $("article").accordion({
                header: "h2",
                heightStyle: "content",
                collapsible: true,
                active: false
            });
        });
    </script>
    <script>
        SyntaxHighlighter.config.tagName = "code";
        SyntaxHighlighter.defaults["toolbar"] = false;
        SyntaxHighlighter.all();
    </script>
}
