@{
    ViewBag.Title = "Lesson 3";
}

<article>
    <h1>Lesson3</h1>

    <section>
        <h2>HTML Crash Course</h2>
        <div>
            <h3>HTML</h3>
            <p>
                <dfn>HTML</dfn> stands for HyperText Markup Language. As a markup language, it differs from a programming language.
                HTML doesn't "do" much of anything. It's purpose is simply to define the content of the webpage. For example, to
                define a paragraph in HTML, you use the <code>&lt;p&gt;</code> element like so:
            </p>

            <pre><code class="brush: html;">@(@"
            <p>This is a paragraph</p>
            ")</code></pre>

            <p>
                There are a few technicallities you need to understand. <code>&lt;p&gt;</code> is the opening <dfn>tag</dfn>
                and <code>&lt;/p&gt;</code> is the closing <dfn>tag</dfn> (notice the slash). The two tags plus the content between them is
                called an <dfn>element</dfn>.
            </p>

            <h3>Basic Elements</h3>
            <p>
                Some useful elements you need to be aware of are:
            </p>

            <dl>
                <dt><code>&lt;p&gt;</code><code>&lt;/p&gt;</code></dt>
                <dd>A paragraph.</dd>

                <dt><code>&lt;div&gt;</code><code>&lt;/div&gt;</code></dt>
                <dd>A division of the page (by default has no visual appearance).</dd>

                <dt><code>&lt;h1&gt;</code><code>&lt;/h1&gt;</code></dt>
                <dd>The main (largest) heading for the page.</dd>

                <dt><code>&lt;h2&gt;</code><code>&lt;/h2&gt;</code></dt>
                <dd>A secondary (second largest) heading for the page.</dd>

                <dt><code>&lt;h3&gt;</code><code>&lt;/h3&gt;</code></dt>
                <dd>A tertiary (third largest) heading for the page.</dd>

                <dt>
                    <code>&lt;h4&gt;</code><code>&lt;/h4&gt;</code>,
                    <code>&lt;h5&gt;</code><code>&lt;/h5&gt;</code>,
                    <code>&lt;h6&gt;</code><code>&lt;/h6&gt;</code>
                </dt>
                <dd>Progressively lesser (smaller) headings.</dd>

                <dt><code>&lt;input /&gt;</code> <span class="no-special-importance">(note: self-closing, that is, no closing tag)</span></dt>
                <dd>An element that accepts user input.</dd>

                <dt><code>&lt;label&gt;</code><code>&lt;/label&gt;</code></dt>
                <dd>Describes the meaning of the input to the user.</dd>

                <dt><code>&lt;button&gt;</code><code>&lt;/button&gt;</code></dt>
                <dd>A button that performs some action when clicked by the user.</dd>

                <dt><code>&lt;form&gt;</code><code>&lt;/form&gt;</code></dt>
                <dd>A container for user input. Can be submitted to the web server for processing.</dd>
            </dl>

            <h3>Example</h3>
            <p>
                Let's see an example web page that uses many of these elements.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Favorite Ice Cream</title>
            </head>
            <body>
                <h1>Which Ice Cream Flavor Do You Prefer?</h1>
                <div>
                    <h2>Chocolate</h2>
                    <p>
                        Chocolate ice cream is ice cream with natural or artificial chocolate flavoring.
                        Chocolate is the second most common flavor of ice cream in the United States, after vanilla.
                        It can be eaten in a bowl, cup, or cone. It can also be eaten straight from the carton.
                    </p>
                    <p>
                        The earliest frozen chocolate recipes were published in Naples, Italy in 1692
                        in Antonio Latini's The Modern Steward. Chocolate was one of the first ice cream flavors,
                        created before vanilla...
                    </p>
                </div>
                <div>
                    <h2>Vanilla</h2>
                    <p>
                        Vanilla is frequently used to flavor ice cream, especially in North America and Europe.
                        Vanilla ice cream, like other flavors of ice cream, was originally created by cooling a
                        mixture made of cream, sugar, and vanilla above a container of ice and salt.
                    </p>
                    <p>
                        Vanilla was first used among the Aztec people. By the 1500’s, Spanish conquistadors,
                        exploring present-day Mexico, had come across Mesoamerican people who consumed vanilla
                        in their drinks and foods. The vanilla bean was brought back to Spain with the conquistadors.
                        In Spain, ""vanilla was used to flavor a chocolate drink that combined cacao beans, vanilla,
                        corn, water, and honey"".
                    </p>
                </div>
                <form>
                    <h2>Choose your favorite</h2>
                    <label><input type=""radio"" name=""fave"" value=""chocolate"" /> Chocolate</label>
                    <label><input type=""radio"" name=""fave"" value=""vanilla"" /> Vanilla</label>
                    <label for=""explanation"">Please Explain why</label>
                    <input type=""text"" id=""explanation"" name=""explanation"" />
                    <button type=""submit"">Submit your decision</button>
                </form>
            </body>
            </html>
            ")</code></pre>

            <h3>Attributes</h3>
            <p>
                If you look closely at that previous example, you'll see that the opening tags for the <code>&lt;input&gt;</code>,
                <code>&lt;label&gt;</code>, and <code>&lt;button&gt;</code> elements contained some extra information.
                Those are called <dfn>attributes</dfn>. An <dfn>attribute</dfn> is a piece of information that is placed in the opening
                tag of an element. It is made up of a name-value pair. That is, the attribute has a name and a value. For example,
                the button in the previous example has an attribute whose name is <code>type</code> and whose value is <code>submit</code>.
            </p>

            <h4>Type Attribute</h4>
            <p>
                The <code>type</code> attribute on an input tag is quite important. It determines which type of input should be rendered.
                Some common values of the <code>type</code> attribute are:
            </p>

            <dl>
                <dt><code>text</code></dt>
                <dd>A text box. The user can type any text (string) into it.</dd>

                <dt><code>radio</code></dt>
                <dd>A round circle that can be checked or unchecked. <strong>When used in a group, only one can be checked at a time.</strong></dd>

                <dt><code>checkbox</code></dt>
                <dd>A square that can be checked or unchecked. <strong>Multiple items can be checked in a group.</strong></dd>

                <dt><code>password</code></dt>
                <dd>Like a textbox, but the characters are hidden. Dots are shown instead.</dd>

                <dt><code>hidden</code></dt>
                <dd>An input that is not shown to the user. You can still access it via JavaScript.</dd>

                <dt><code>submit</code></dt>
                <dd>
                    A submit button. Similar to a <code>&lt;button type="submit"&gt;</code>. The difference, however,
                    is that a button can contain other HTML elements, whereas an <code>&lt;input&gt;</code> cannot.
                </dd>
            </dl>

            <h4>ID Attribute</h4>
            <p>
                The <code>id</code> attribute identifies a specific element on the page. You, as the programmer, can choose the value of the <code>id</code>.
                However, once you have used a particular ID, you cannot use that same value again for any other elements. In other words, each ID must be unique.
            </p>

            <h4>Name Attribute</h4>
            <p>
                The <code>name</code> attribute is sent the the server when the submit button is pressed. We won't use this much (if at all) in this class,
                but it's important to know about it.
            </p>

            <h4>For Attribute</h4>
            <p>
                The <code>for</code> attribute is used on a <code>&lt;label&gt;</code> to indicate which <code>&lt;input&gt;</code> it belongs to.
            </p>

            <h4>Class Attribute</h4>
            <p>
                The <code>class</code> attribute is a way to identify one or more elements on the page. It differes from the <code>id</code> attribute in that
                the value of the <code>class</code> attribute does not have to be unique. You can use the same class value for many elements on the page.
                It's a way to group multiple elements. The following example shows that all of the even-numbered paragraphs have a class called "even".
            </p>

            <pre><code class="brush: html;">@(@"
            <p>
                I'm paragraph 1
            </p>
            <p class=""even"">
                I'm paragraph 2
            </p>
            <p>
                I'm paragraph 3
            </p>
            <p class=""even"">
                I'm paragraph 4
            </p>
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>CSS Crash Course</h2>
        <div>
            <h3>CSS</h3>
            <p>
                <dfn>CSS</dfn> stands for Cascading Style Sheets. CSS is used to style your web page.
                You can completely change the look and feel of your website by modifying the CSS.
            </p>

            <h3>How do I add CSS to my HTML?</h3>
            <p>
                There are two ways to add CSS to your web page. These two ways are very similar to the ways in which you add JavaScript to your web page.
                The first is by adding a <code>&lt;style&gt;</code> element inside the <code>&lt;head&gt;</code> element. You can then directly type your
                CSS between the opening <code>&lt;style&gt;</code> and closing <code>&lt;/style&gt;</code> tags.
            </p>

            <p>
                In the following example, all of the even paragraphs have a light blue background color thanks to CSS.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Yay for CSS</title>
                <style>
                    p.even {
                        background-color: lightblue;
                    }
                </style>
            </head>
            <body>
                <p>
                    I'm paragraph 1
                </p>
                <p class=""even"">
                    I'm paragraph 2
                </p>
                <p>
                    I'm paragraph 3
                </p>
                <p class=""even"">
                    I'm paragraph 4
                </p>
            </body>
            </html>
            ")</code></pre>

            <p>
                The second way to add CSS is to place it in a separate file with a <strong>.css</strong> extension. Then you use the <code>&lt;link&gt;</code>
                element to reference that external style sheet. The <code>&lt;link&gt;</code> element must include a <code>href</code> attribute whose value is
                the path to the CSS file. You should also add a <code>rel="stylesheet"</code> attribute as well. This simply states that it's a stylesheet.
            </p>

            <p>
                In the following example, assume that a file named "styles.css" exists in the same folder as the HTML document. You can then include the CSS file
                in your web page like so:
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Yay for CSS</title>
                <link href=""styles.css"" rel=""stylesheet"" />
            </head>
            <body>
                <p>
                I'm paragraph 1
                </p>
                <p class=""even"">
                    I'm paragraph 2
                </p>
                <p>
                    I'm paragraph 3
                </p>
                <p class=""even"">
                    I'm paragraph 4
                </p>
            </body>
            </html>
            ")</code></pre>

            <h3>How does CSS work?</h3>
            <p>
                CSS works by "selecting" elements and then applying "rules" to those elements. We won't cover everything that CSS can do here.
                If you want to get a better understanding of CSS, visit <a href="http://localhost:64923/Lessons/4">HTML &amp; CSS: Lesson 4</a>.
            </p>

            <h4>Examples</h4>
            <p>
                The following are a few examples of CSS with comments. The comments begin with <code>/*</code> and end with <code>*/</code>.
            </p>

            <pre><code class="brush: css;">@(@"
            /* Select all body tags (there should only be one), make it's background color black, and it's foreground color white. */
            body {
                background-color: black;
                color: white;
            }
            /* Select all paragraphs and set the font family (type of font) to Arial and make the text bold. */
            p {
                font-family: Arial;
                font-weight: bold;
            }
            /* Select all elements that have a class of 'highlighted' and make their background color yellow. */
            .highlighted {
                background-color: yellow;
            }
            /* Select the element whose id is 'superCool' and give it a blue border with rounded corners. */
            #superCool {
                border: solid 2px lightblue;
                border-radius: 10px;
            }
            ")</code></pre>

            <h4>Tree Terminology</h4>

            <p>
                An HTML document can be thought of like a tree. It is analogous to a family tree and similar language is used to describe both
                types of trees. Here are some important terms you should know:
            </p>

            <dl>
                <dt>parent</dt>
                <dd>If an element contains another element, then it is that other element's parent.</dd>

                <dt>child</dt>
                <dd>If an element is contained by another element, then it is that element's child.</dd>

                <dt>sibling</dt>
                <dd>If two element have the same parent, then they are siblings.</dd>

                <dt>ancestor</dt>
                <dd>If an element is the parent or grandparent or great-grandparent, etc. of an elmenent, then it is an ancestor of that element.</dd>

                <dt>descendant</dt>
                <dd>If an element is the child or grandchild or great-grandchild, etc of an element, then it is a descendant of that element.</dd>
            </dl>

            <p>
                Let's illustrate with an example. Take, for instance, the following HTML document.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Your title here</title>
            </head>
            <body>
                <header>
                    <nav>
                        <ul>
                            <li><a href=""home.html"">Home</a></li>
                            <li><a href=""about.html"">About</a></li>
                            <li><a href=""contact.html"">Contact</a></li>
                        </ul>
                    </nav>
                </header>
                <div id=""content"">
                    <article>
                        <h1>Article 1</h1>
                        <p>lorem ipsum</p>
                        <p>dolor sit amet</p>
                    </article>
                    <article>
                        <h1>Article 2</h1>
                    </article>
                </div>
                <aside>
                </aside>
                <footer>
                </footer>
            </body>
            </html>
            ")</code></pre>

            <p>
                In this document the <code>body</code> is the parent of the <code>header</code>, <code>div</code>, <code>aside</code>, and <code>footer</code>.
                The two <code>article</code> elements are siblings. The <code>h1</code> inside of the first <code>article</code> and the two <code>p</code> elements
                are siblings as well.
            </p>

            <p>
                The <code>html</code> element is an ancestor of every other element. The <code>nav</code> element is a descendant of <code>html</code>, though it is
                not a child. The <code>head</code> element is both a descendant and a child of the <code>html</code> element.
            </p>

            <h4>More Selectors</h4>
            <p>
                CSS defines selectors that allow you to "traverse" the tree to find the element(s) you are looking for. The following example
                again contains comments to describe what is happening.
            </p>

            <pre><code class="brush: css;">@(@"
            /* Select each h1 tag that is a child of an article and make it's font size 100px (rather large). */
            article > h1 {
                font-size: 100px;
            }
            /* Select each h2 tag that is a descendant (not necessarily a child) of an article and make it's font size 5px (rather small). */
            article h2 {
                font-size: 5px;
            }
            
            /* Select each paragraph that is a sibling of an h1 and give it a gradient background. */
            /* Note that the paragraph must come AFTER the h1. Sibling selectors only go forward -- never backward. */
            h1 ~ p {
                background-image: linear-gradient(#f2f6f8 0%,#d8e1e7 50%,#b5c6d0 51%,#e0eff9 100%);
            }
            /* Select only the first paragaraph that is a sibling of the h1 and immediately follows it. Give it a different gradient background. */
            h1 + p {
                background-image: linear-gradient(#ffb76b 0%,#ffa73d 50%,#ff7c00 51%,#ff7f04 100%);
            }
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>The DOM</h2>
        <div>
            <h3>Document Object</h3>
            <p>
                DOM stands for <dfn>Document Object Model</dfn>. Because JavaScript is an object-oriented language, we model things as objects. The HTML document
                is no exception. So the <em>Document</em> in Document Object Model refers to the HTML document. Whenever a web page is loaded by the browser, not
                only does the browser display the web page to the user, it also create an object that represents the HTML document. The browser makes this document
                object available to your JavaScript code. This means that you can examine and even modify the web page via JavaScript!
            </p>

            <p>
                The object that represents the HTML document is aptly named <code>document</code>. The <code>document</code> object provides method (remember that methods
                are functions) that allow you to find elements in the HTML document. Let's look at 5 such methods.
            </p>

            <h4>getElementById</h4>
            <p>
                The <code>getElementById</code> method allows you to select a single element that has a specified id. For example, you can select a paragraph that has an id
                of "paragraph1". If there is no element that has the given id, then <code>null</code> is returned. <dfn>null</dfn> is a special value that signifies that there
                is no result.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <p id=""paragraph1"">...</p>
                <script>
                    var paragraph1 = document.getElementById('paragraph1');
                </script>
            </body>
            ")</code></pre>

            <h4>getElementsByTagName</h4>
            <p>
                The <code>getElementsByTagName</code> method allows you to select all elements that have a given tag name. For example, you can select all paragraphs
                as the following example demonstrates. Note that this method returns a <code>NodeList</code>, which is an array-like object. Even if there is only one paragraph
                in the document, the method will still return a <code>NodeList</code>. It will have only one item in it, of course. If there are no paragraphs, then the <code>NodeList</code>
                will be empty. It will have a length of zero.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <p>Hello</p>
                <p>World</p>
                <script>
                    var paragraphs = document.getElementsByTagName('p');
            
                    for(var i = 0; i < paragraphs.length; i++) {
                        alert(paragraphs[i].textContent);
                    }
                </script>
            </body>
            ")</code></pre>

            <h4>getElementsByClassName</h4>

            <p>
                The <code>getElementsByClassName</code> method selects all elements that have the given <code>class</code>. This method returns a <code>NodeList</code> just
                like the <code>getElementsByTagName</code> method does. Note that elements can have more than one class. Each class is separated from the others by a space.
                In the following example, the third paragraph has two classes "wow" and "cool". It will still be found by the <code>getElementsByClassName</code> method, because
                it does indeed have the class "wow".
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <p>One</p>
                <p class=""wow"">Two</p>
                <p class=""wow cool"">Three</p>
                <p>Four</p>
                <script>
                    var wowElements = document.getElementsByClassName('wow');
            
                    for(var i = 0; i < wowElements.length; i++) {
                        alert(wowElements[i].className);
                    }
                </script>
            </body>
            ")</code></pre>

            <h4>getElementsByName</h4>

            <p>
                The <code>getElementsByName</code> method returns all elements that have a given <code>name</code>. Recall that the <code>name</code> attribute is used
                on <code>&lt;input&gt;</code> elements. Therefore the following example uses <code>&lt;input&gt;</code> elements to demonstrate its use.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <form>
                    <h1>Choose all sports that you enjoy playing</h1>
                    <label><input type=""checkbox"" name=""sports"" /> Baseball</label>
                    <label><input type=""checkbox"" name=""sports"" /> Basketball</label>
                    <label><input type=""checkbox"" name=""sports"" /> Football</label>
                    <label><input type=""checkbox"" name=""sports"" /> Soccer</label>
                    <label><input type=""checkbox"" name=""sports"" /> Hockey</label>
                    
                    <input type=""submit"" value=""Save"" />
                </form>
                <script>
                    var sports = document.getElementsByName('sports');
            
                    for(var i = 0; i < sports.length; i++) {
                        alert(sports[i].value);
                    }
                </script>
            </body>
            ")</code></pre>

            <h4>querySelectorAll</h4>
            <p>
                The <code>querySelectorAll</code> method is the most powerful of them all. It can select elements using a CSS selector string. For example,
                you can select all paragraphs that are children of a div and have a class of 'large' like so:
            </p>

            <p class="highlighted">
                The <code>querySelectorAll</code> method doesn't work perfectly in all browsers. In fact, this is the reason that jquery was invented!
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <p>I'm not a child of a div</p>
                <div>
                    <p>I am a child of a div, but I don't have the 'large' class.</p>
                    <p class=""large"">I'm the one you're looking for.</p>
                </div>
                <script>
                    var largeChildren = document.querySelectorAll('div > p.large');
            
                    for(var i = 0; i < largeChildren.length; i++) {
                        alert(largeChildren[i].textContent);
                    }
                </script>
            </body>
            ")</code></pre>

            <h3>Elements have the same methods</h3>
            <p>
                The <code>document</code> object isn't the only object that has those five methods discussed above. You can call the same methods on any
                element in the document. For example, if you call the <code>getElementsByClassName</code> method on a paragraph, then only those elements
                that are descendants of that paragraph and have the class will be found. In other words, the method call is <em>scoped</em> to the element
                on which it is called.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <p class=""woot"">Won't find me.</p>

                <div id=""container"">
                    <p>Don't look at me, I don't have class.</p>
                    <p class=""woot"">I'm the one you're looking for.</p>
                </div>

                <script>
                    var container = document.getElementById('container');
                    var woots = container.getElementsByClassName('woot');
                    alert(woots.length); // => 1
                </script>
            </body>
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>Manipulating the DOM</h2>
        <div>
            <h3>Modifying existing elements</h3>
            <p>
                Once you have found an element, you can do things such as modify how it looks. You do this by accessing the <code>style</code> property.
                The <code>style</code> property is itself an object. Yes properties can be objects themselves. This property represent all of the CSS for that element.
            </p>

            <p>
                In the following example, the JavaScript code finds the element with the id of "hidden" and hides it from view. It then finds all elements
                with a class of "highlighted" and sets their background color to yellow. Finally it finds all paragraphs and changes the font color to red.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>JavaScript is Awesome!</title>
            </head>
            <body>
                <h1>Hello World</h1>
                <h2 id=""hidden"">Now you see me...</h2>
                <p>
                    Paragraph 1
                </p>
    
                <div class=""highlighted"">
                    Div 1 - highlighted
                </div>
    
                <div>
                    Div 2
                </div>
    
                <p class=""highlighted"">
                    Paragraph 2 - highlighted
                </p>
    
                <div>
                    Div 3
                </div>
                <script>
                    // First hide the element with an id of 'hidden'.
                    var hidden = document.getElementById('hidden');
                    hidden.style.display = 'none';

                    // Next find all elements with a class of 'highlighted' and set the background color to yellow.
                    var highlightedNodes = document.getElementsByClassName('highlighted');

                    // A for loop is required to access each node in the list.
                    for (var i = 0; i < highlightedNodes.length; i++) {
                        highlightedNodes[i].style.backgroundColor = 'yellow';
                    }

                    // Finally set the text color to red on all paragraphs.
                    var paragraphs = document.getElementsByTagName('p');

                    // Again a for loop is required to access each node in the list.
                    for (var i = 0; i < paragraphs.length; i++) {
                        paragraphs[i].style.color = 'red';
                    }
                </script>
            </body>
            </html>
            ")</code></pre>

            <p>
                You can also modify the <code>id</code> or <code>class</code> of an element. In fact, there is a corresponding property on the JavaScript object
                for each attribute on the HTML element. The following example shows how to set the <code>id</code> and <code>class</code> in JavaScript.
                Note that the property is called <code>className</code> rather than <code>class</code>. The reason is that <code>class</code> is a reserved word
                in JavaScript.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>JavaScript is Awesome!</title>
            </head>
            <body>
                <h1>Hello World</h1>
                <script>
                    // Note the [0], this gets the first element from the list.
                    var heading = document.getElementsByTagName('h1')[0];
                    heading.id = 'topHeading';
                    heading.className = 'fun';
                </script>
            </body>
            </html>
            ")</code></pre>

            <p>
                Getting or setting the text of an element is tricky. The official standard says that you should use the <code>textContent</code> property,
                but Interet Explorer uses the <code>innerText</code> property. Ugh! Don't worry about it too much, because fortunately jQuery fixes that problem.
                But lets see an example anyways. In the following example, we first check if the <code>textContent</code> property is defined.
                If it is, then we'll use it. Otherwise, we'll use the <code>innerText</code> property.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>JavaScript is Awesome!</title>
            </head>
            <body>
                <h1>Hello World</h1>
                <script>
                    // Note the [0], this gets the first element from the list.
                    var heading = document.getElementsByTagName('h1')[0];

                    if (heading.textContent !== undefined) {
                        return heading.textContent;
                    }
                    return heading.innerText;
                </script>
            </body>
            </html>
            ")</code></pre>

            <p>
                <code>&lt;input&gt;</code> elements don't have text. Instead they have a <code>value</code> property. Getting or setting the value is straightforward;
                you simply access the <code>value</code> property.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>JavaScript is Awesome!</title>
            </head>
            <body>
                <input type=""text"" value=""10"" id=""myGuess"" />
                <script>
                    var guessInput = document.getElementById('myGuess');
                    alert('Original guess ' + guessInput.value);
                    guessInput.value = 25;
                </script>
            </body>
            </html>
            ")</code></pre>

            <h3>Creating new elements</h3>
            <p>
                You can also create new elements and insert them into the DOM. You create a new element using the <code>document.createElement</code> method.
                You can set the text of the newly-created element using the <code>textContent</code> or <code>innerText</code> property.
                Or another way to add text to the element is by using the <code>document.createTextNode</code> method.
            </p>

            <p>
                Lastly, you insert the new element into the document using either the <code>appendChild</code> or <code>insertBefore</code> method.
                <code>appendChild</code> accepts one argument, which is the new child element to be added as the last child of the element on which the method was called.
                <code>insertBefore</code> accepts two arguments. The first is the new child element to be added. The second is an element before which the new element will be added.
            </p>

            <p>
                In the following example, JavaScript is used to append three new paragraphs into the div with an id of <code>container</code>.
                A function is used so that the logic can be centralized in one location and not duplicated.
                Lastly a new <code>h2</code> is inserted before the container using the <code>insertBefore</code> method.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
            <title>JavaScript is Awesome!</title>
            </head>
            <body>
                <h1>Dynamically added content</h1>
                <div id=""container""></div>
                <script>
                    // This function creates a new paragraph with the given text.
                    // It then appends the paragraph to the parent element.
                    function appendParagraph(parent, text) {
                        var paragraph = document.createElement('p');
                        var text = document.createTextNode(text);
                        paragraph.appendChild(text);
                        parent.appendChild(paragraph);
                    }

                    // Find the element that will contain our paragraphs.
                    var container = document.getElementById('container');

                    appendParagraph(container, ""Hi, I'm paragraph 1"");
                    appendParagraph(container, ""And I'm paragraph 2"");
                    appendParagraph(container, ""Hola, soy paragraph 3"");

                    // Create a new h2
                    var heading2 = document.createElement('h2');
                    heading2.textContent = ""Look ma! I'm before the container"";

                    // Use the insertBefore method to insert it before the container
                    var body = document.getElementsByTagName('body')[0];
                    body.insertBefore(heading2, container);
                </script>
            </body>
            </html>
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>Intro to Events</h2>
        <div>
            <h3>Events</h3>
            <p>
                In the next lesson we'll talk a lot more about events. This is meant to be just an introduction to help you with the next programming assignment.
                An event signals that some specific action has occurred and gives you, the programmer, an opportunity to handle the event by executing a function.
                Examples of events include: 
            </p>

            <ul>
                <li>The page finishes loading</li>
                <li>The user clicks on a button</li>
                <li>The user hovers the mouse over an element</li>
                <li>The user types on the keyboard</li>
            </ul>

            <p>
                Those are just a few examples. I could give many more. You handle an event by registering a function to be executed when that event occurs.
                For example, the following code registers a function that gets called each time the user presses a button.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <button id=""alertButton"">Click Me</button>

                <script>
                    var alertButton = document.getElementById('alertButton');
                    alertButton.onclick = function() {
                        alert('Thanks for clicking');
                    };
                </script>
            </body>
            ")</code></pre>

            <p>
                In the next example we listen for the <code>keypress</code> event to happen on an <code>&lt;input&gt;</code>. Note that the browser passes
                an <code>Event</code> object to the function that has a property that tells us which key was pressed. Using that we can perform a specific
                action only if the <kbd>Enter</kbd> key was pressed.
            </p>

            <pre><code class="brush: html;">@(@"
            <body>
                <input type=""text"" id=""userInput"" />

                <script>
                    var userInput = document.getElementById('userInput');
                    userInput.onkeypress = function(e) {
                        if (!e) e = window.event;
                        var keyCode = e.keyCode || e.which;
                        if (keyCode == '13') {
                            var guess = userInput.value;
                            userInput.value = '';
                            alert(""You're guess was "" + guess);
                        }
                    };
                </script>
            </body>
            ")</code></pre>
        </div>
    </section>

    <section>
        <h2>Your Second Program</h2>
        <div>
            <p>
                Your second program is to start with your first program and get rid of all occurances of <code>prompt</code> and <code>alert</code>.
                Next, create an HTML page that has just a single <code>&lt;input type="text" &gt;</code> to begin with. Instead of using <code>prompt</code>,
                you'll create and insert a new paragraph (with a background color such as <strong>blue</strong>) into the page.
                The pararaph will ask the user to choose a number.
            </p>

            <p>
                The user should then enter a number into the textbox and hit enter. You should listen for the <code>keypress</code> event as was shown in the
                previous section on events (alternatively, you could add a button and listen for the click event). You should then add a new paragraph
                (with a different background color such as <strong>orange</strong>) below the first one that contains the users guess.
</p>

            <p>
                If the guess was too high or too low, you need to append a new (<strong>blue</strong>) paragraph that says so, and give the user a chance
                to guess again. When the user guesses correctly, you'll append a final paragraph that tells the user he's won.
            </p>

            <p>
                The end result should have alternating <strong>blue</strong> and <strong>orange</strong> (or whatever colors you chose) paragraphs going from top to bottom.
                The final paragraph will be the one tellin the user that he/she has won.
            </p>
        </div>
    </section>
</article>

@section scripts {
    <script>
        $(function () {
            $("article").accordion({
                header: "h2",
                heightStyle: "content",
                collapsible: true,
                active: false
            });
        });
    </script>
    <script>
        SyntaxHighlighter.config.tagName = "code";
        SyntaxHighlighter.defaults["toolbar"] = false;
        SyntaxHighlighter.all();
    </script>
}